1 2 4
1 5 10 4 11 3 12 2 13
1 14 28 13 29 12 30 .......


1 2 4
1 5 10 4 11 3 12 2 13
1 14 28 13 29

===> sort



1 1 1 2 2 3 4 4 5 10.

Giả sử số thứ 10 trong 29 số đầu tiên là 13.

Tổng cộng từ 1 -> 13 có tổng cộng 14 số.

Vì 14 >= 10 ====>

Giả sử số lớn thứ 10 là số 4.

Từ 1 -> 4 là có 8 số

Hàng 1: [1, 2], [4, 4]
Hàng 2: [1, 5], [10, 13]
Hàng 3: [1, 14], .....


N = 17 ---> 29.
M = 10

Hàng 1: [1, 2], [4, 4]
Hàng 2: [1, 5], [10, 13]
Hàng 3: [13, 14], [1, 1], [28, 29]


=====> cần chia thành những đoạn con RỜI RẠC

[1, 1], [2, 2], [3, 3], [4, 4], [10, 12], [13, 13], [14, 14], [28, 29]


vector <int> v: {0, 3, 0, 9, 12, 0, 27, 2, 4, 5, 13, 14, 1, 29}
sort v: {0, 0, 0, 1, 2, 3, 4, 5, 9, 12, 13, 14, 27, 29}

===> {[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 9], [10, 12], [13, 13], [14, 14], [15, 27],
[28, 29]}

Đoạn [1, 1] có 3 đoạn phủ.
Đoạn [2, 2] có 2 đoạn phủ.
Đoạn [3, 3] có 1 đoạn phủ.
Đoạn [6, 9] có 0 đoạn phủ.

Tìm số thứ M !!!!!!!!!


Giả sử số thứ M là x.

Số 1 xuất hiện bn lần, số 2 xuất hiện bn lần ..., số x xuất hiện bn lần.

Nếu tổng số lần xuất hiện >= M.
l = 1, r = 10^18.

Đếm từ 1 -> x có tổng cộng bao nhiêu số.




Chuyển 3 : A -> C, B: TG
  Chuyển 2 đĩa từ A -> B, C: TG
    Chuyển 1 đĩa từ A -> C, B: TG
    Chuyển 1 đĩa từ A -> B, C: TG
    Chuyển 1 đĩa từ C -> B, A: TG
  Chuyển 1 đĩa từ A -> C, B: TG
  Chuyển 2 đĩa từ B -> C, A: TG
    Chuyển 1 đĩa từ B -> A, C: TG
    Chuyển 1 đĩa từ B -> C, A: TG
    Chuyển 1 đĩa từ A -> C, B: TG

--------------------------------------------------------------------------
struct element {
  int sumleft, sumRight
};

element solve(int l, int r) {
  element ans;
  return ans;
}

6
2 -1 2 3 4 -5

arr = [2 -1 2 3 4 -5]

[1 .. 6]

[1..3], [4..6]
Đoạn [1..3] có maxSum là 3, sumRight là 3.
Đoạn [4..6] có maxSum là 7, sumLeft là 7.



[-1, 2, 3, 4]
solve(2, 5):
 sumLeft: 8
 sumRight: 9.
 maxSum: 9


solve(l, r):

. sumLeft: Tổng sub array lớn nhất mà nhận a[l] làm phần tử đầu tiên
. sumRight: Tổng sub array lớn nhất mà nhận a[r] làm phần tử cuối cùng.
. maxSub: Tổng sub array lớn nhất trong tất cả các subarray của đoạn [l, r]



Đáp án bài toán:
solve(1, N).maxSum


Giải bài toán nhỏ nhất:

Nếu l == r ??? sumLeft = sumRight = maxSum = a[l]

sumLeft và sumRight.



mid = (l + r) / 2
[l .. mid] và [mid + 1 .. r]

maxSum của đoạn [l .. r]

. maxSum của đoạn [l .. mid]
. maxSum của đoạn [mid + 1 .. r]
. sumRight của đoạn [l .. mid] + sumLeft của đoạn [mid + 1 .. right]






